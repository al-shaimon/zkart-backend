// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - Contains only authentication and common fields
model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  role       UserRole   @default(CUSTOMER)
  status     UserStatus @default(ACTIVE)
  isVerified Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Role-based relations
  admin    Admin?
  vendor   Vendor?
  customer Customer?

  @@map("users")
}

// Customer Model - Customer specific data
model Customer {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user      User           @relation(fields: [email], references: [email])
  following ShopFollower[]
  orders    Order[]
  reviews   Review[]
  cart      Cart?

  // Many-to-many relations with junction tables
  recentlyViewed     CustomerRecentProduct[]
  productComparisons CustomerProductComparison[]

  @@map("customers")
}

// Admin Model - Admin specific data
model Admin {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

// Vendor Model - Vendor specific data
model Vendor {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [email], references: [email])
  shops Shop[] // Changed from single shop to multiple shops

  @@map("vendors")
}

// Update related models to reference Customer instead of User
model Order {
  id          String      @id @default(uuid())
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])
  totalAmount Float
  status      OrderStatus
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  couponId String?
  coupon   Coupon? @relation(fields: [couponId], references: [id])
  discount Float   @default(0)

  paymentId     String?
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod @default(STRIPE)
  reviews       Review[] // Add relation to track which products can be reviewed

  @@map("orders")
}

model Review {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  orderId    String // To verify purchase
  order      Order    @relation(fields: [orderId], references: [id])
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation for vendor response
  response ReviewResponse?

  @@map("reviews")
}

model Cart {
  id         String   @id @default(uuid())
  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  items CartItem[]

  @@map("carts")
}

// Product model update
model Product {
  id             String    @id @default(uuid())
  name           String
  description    String?
  price          Float
  stock          Int
  discount       Float?
  image          String
  isFlashSale    Boolean   @default(false)
  flashSalePrice Float?
  flashSaleEnds  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isDeleted      Boolean   @default(false)

  // Relations
  shop       Shop        @relation(fields: [shopId], references: [id])
  shopId     String
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String
  reviews    Review[]
  cartItems  CartItem[]
  orderItems OrderItem[]

  // Many-to-many relations
  recentlyViewedBy CustomerRecentProduct[]
  comparedBy       CustomerProductComparison[]
  images           ProductImage[]

  // Product duplication relations (fixed)
  originalProducts   ProductDuplicate[] @relation("OriginalProduct")
  duplicatedProducts ProductDuplicate[] @relation("DuplicateProduct")

  @@map("products")
}

// Shop Model
model Shop {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  // Relations
  vendor        Vendor         @relation(fields: [vendorId], references: [id])
  vendorId      String
  products      Product[]
  followers     ShopFollower[]
  ShopBlacklist ShopBlacklist?

  @@map("shops")
}

// Product category Model
model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  // Relations
  products Product[]

  @@map("categories")
}

// CartItem Model
model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("cart_items")
}

// Junction table for Recently Viewed Products
model CustomerRecentProduct {
  id       String   @id @default(uuid())
  viewedAt DateTime @default(now())

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String

  @@unique([customerId, productId])
  @@map("customer_recent_products")
}

// Junction table for Product Comparisons
model CustomerProductComparison {
  id      String   @id @default(uuid())
  addedAt DateTime @default(now())

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String

  @@unique([customerId, productId])
  @@map("customer_product_comparisons")
}

// Junction table for Shop Followers
model ShopFollower {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  shop       Shop     @relation(fields: [shopId], references: [id])
  shopId     String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  @@unique([shopId, customerId])
  @@map("shop_followers")
}

// OrderItem Model
model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("order_items")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

// Coupon Model
model Coupon {
  id         String    @id @default(uuid())
  code       String    @unique
  discount   Float
  isActive   Boolean   @default(true)
  validFrom  DateTime  @default(now())
  validUntil DateTime?
  usageLimit Int?
  usageCount Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  orders Order[]

  @@map("coupons")
}

// ShopBlacklist Model
model ShopBlacklist {
  id            String   @id @default(uuid())
  shopId        String   @unique
  shop          Shop     @relation(fields: [shopId], references: [id])
  reason        String?
  blacklistedAt DateTime @default(now())

  @@map("shop_blacklist")
}

// ProductDuplicate model (fixed)
model ProductDuplicate {
  id               String   @id @default(uuid())
  originalId       String
  originalProduct  Product  @relation("OriginalProduct", fields: [originalId], references: [id])
  duplicateId      String
  duplicateProduct Product  @relation("DuplicateProduct", fields: [duplicateId], references: [id])
  createdAt        DateTime @default(now())

  @@map("product_duplicates")
}

// ProductImage model
model ProductImage {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

// Add ReviewResponse model for vendor responses
model ReviewResponse {
  id        String   @id @default(uuid())
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId String @unique

  @@map("review_responses")
}

// Add necessary enums
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  AAMARPAY
}

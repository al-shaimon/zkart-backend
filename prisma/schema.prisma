// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  userId       String     @id @default(uuid())
  name         String
  email        String     @unique
  image        String?
  password     String
  role         Role       @default(CUSTOMER)
  status       UserStatus @default(ACTIVE)
  isVerified   Boolean    @default(false)
  refreshToken String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  shop      Shop?
  orders    Order[]
  reviews   Review[]
  cart      Cart?
  following Follower[]

  @@map("users")
}

// Cart Model
model Cart {
  cartId    String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[]

  @@map("carts")
}

// CartItem Model
model CartItem {
  cartItemId String @id @default(uuid())

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [cartId])

  productId String
  product   Product @relation(fields: [productId], references: [productId])

  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

// Product Model
model Product {
  productId String @id @default(uuid())

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [shopId])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [categoryId])

  name        String
  price       Float
  stock       Int
  discount    Float?
  image       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews Review[]

  OrderItem OrderItem[]

  CartItem CartItem[]

  @@map("products")
}

// Shop Model
model Shop {
  shopId String @id @default(uuid())

  vendorId String @unique
  vendor   User   @relation(fields: [vendorId], references: [userId])

  shopName    String
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]
  Follower Follower[]

  @@map("shops")
}

// Product category Model
model Category {
  categoryId  String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

// Review Model
model Review {
  reviewId  String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [productId])
  productId String
  user      User     @relation(fields: [userId], references: [userId])
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// Follower Model
model Follower {
  followerId String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [userId])
  userId     String
  shop       Shop     @relation(fields: [shopId], references: [shopId])
  shopId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("followers")
}

// Order Model
model Order {
  orderId     String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [userId])
  userId      String
  totalAmount Float
  status      OrderStatus
  paymentId   String?
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("orders")
}

// OrderItem Model
model OrderItem {
  orderItemId String  @id @default(uuid())
  order       Order   @relation(fields: [orderId], references: [orderId])
  orderId     String
  product     Product @relation(fields: [productId], references: [productId])
  productId   String
  quantity    Int
  price       Float

  @@map("order_items")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  ADMIN
  VENDOR
  CUSTOMER
}
